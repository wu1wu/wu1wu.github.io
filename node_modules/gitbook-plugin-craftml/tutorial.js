var _ = require('lodash')
var path = require('path')

_.templateSettings.interpolate = /{{([\s\S]+?)}}/g;

const tutorialTpl = _.template(`
<div class="tutorial">
<div class="title">
<a href="{{path}}/">{{title}}</a>
</div>
<a href="{{path}}/">
<img class="objective"
  src="{{path}}/objective.png"
  height="200px%"
  style="border: solid 1px #ddd; border-radius: 5px;"/>
</a>
{{ concepts }}
</div>
`)

const conceptTpl = _.template(`
  <span class="doc-link tag"><a href="./{{relative}}" target="_doc"><code>{{code}}</code></a></span>
`)

function attr(s) {
    var q = _.find(this.book.files, (f) => {
      return f.match(s)
    })
    var p = path.dirname(this.ctx.file.path)
    var relative = path.relative(p, q)
    return `<span class="doc-link attr"><a href="./${relative}" target="_doc"><code>${s}</code></a></span>`
}


function l(s) {
    var p = path.dirname(this.ctx.file.path)
    var relative = path.relative(p, `language/layout/${s}.html`)
    return `<span class="doc-link transform"><a href="./${relative}" target="_doc"><code>${s}</code></a></span>`
}

function t(s) {
    var p = path.dirname(this.ctx.file.path)
    var relative = path.relative(p, `language/transform/${s}.html`)
    return `<span class="doc-link layout"><a href="./${relative}" target="_doc"><code>${s}</code></a></span>`
}

function tag(s) {
  console.log('s',s)

  var name = s
  if (_.includes(['h1','h2','h3','h4','h5'], s)){
    name = 'heading'
  }

  var q = _.find(this.book.files, (f) => {
    return path.basename(f).match('^' + name + '.md')
  })
  if (q){
    var p = path.dirname(this.ctx.file.path)
    var relative = path.relative(p, q)
    var code = _.escape(`<${s}>`)
    return conceptTpl({relative, code})
  } else {
    return s
  }
}

var funcs = {
  tag, l, t, attr
}

var tutorial = {
  blocks: ["title","path","concepts"],
  process: function(blk){
    var _ = require('lodash')
    var codes = {}
    _.each(blk.blocks, function(_blk) {
      codes[_blk.name] = _blk.body.trim();
    })

    var concepts = _.compact(codes['concepts'].trim().split(' '))

    var conceptsHtml = _.map(concepts, c => {
      var toks = c.split(':')
      var s = toks[0].trim()
      var type = toks[1].trim()
      return funcs[type].call(this, s)
    }).join(' ')

    // var concepts = _.map(['cube','row'], (concept) => {
    //   var html = tag.call(this, concept)
    //   return html
    // }).join(' ')
    return tutorialTpl({title: codes['title'], path: codes['path'], concepts: conceptsHtml})
  }
}

tutorial.tag = tag
module.exports = tutorial
